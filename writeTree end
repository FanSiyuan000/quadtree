#include"treeStructure.h"
#include"stdio.h"
#include"math.h"
#include"stdlib.h"
#include"writeTree.h"
#include"buildTree.h"
void writeTree(Node *head) {

	FILE *fp = fopen("quad.out", "w");

	writeNode(fp, head);

	fclose(fp);

	return;
}

// recursively visit the leaf nodes

void writeNode(FILE *fp, Node *node) {

	int i;

	if (node->child[0] == NULL)
		printOut(fp, node);
	else {
		for (i = 0; i < 4; ++i) {
			writeNode(fp, node->child[i]);
		}
	}
	return;
}

// write out the (x,y) corners of the node

void printOut(FILE *fp, Node *node) {
	double x = node->xy[0];
	double y = node->xy[1];
	int level = node->level;
	double h = pow(2.0, -level);

	fprintf(fp, " %g %g\n", x, y);
	fprintf(fp, " %g %g\n", x + h, y);
	fprintf(fp, " %g %g\n", x + h, y + h);
	fprintf(fp, " %g %g\n", x, y + h);
	fprintf(fp, " %g %g\n\n", x, y);

	return;
}
void destroyTree(Node *node)
{
	int i;
	if (node->child[0] == NULL)
	{
		free(node);
	}
	else {
		for (i = 0; i < 4; ++i)
		{
			destroyTree(node->child[i]);
		}
		free(node);
	}
	return;
}
double nodeValue(Node *node, double time) {

	int level = node->level;
	double x = node->xy[0];
	double y = node->xy[1];

	double h = pow(2.0, -level);

	return(value(x + 0.5*h, y + 0.5*h, time));
}

// Data function

double value(double x, double y, double time) {

	return(2.0*exp(-8.0*(x - time)*(x - time)) - 1.0);
}
void make_leaf1(Node *node)
{
	int i;
	if (node->child[0] == NULL)
	{
		if (nodeValue(node, 0.0) > 0.5)
		{
			node->flag = 1;
		}
		else if (nodeValue(node, 0.0) < -0.5)
		{
			node->flag = -1;
		}
	}
	else
	{
		node->flag = 0;
		for (i = 0; i < 4; i++)
			make_leaf1(node->child[i]);
	}
}
void make_leaf2(Node *node)
{
	int i;
	int n;
	n = 0;
	int makenumber;
	makenumber = 0;
	int removenumber;
	removenumber = 0;
	if (node->child[0] == NULL)
	{
		if (node->flag == 1)
		{
			makeChildren(node);
			make_leaf1(node);
			makenumber += 4;
		}
	}
	else
	{
		for (i = 0; i < 4; i++)
		{
			if (node->child[i]->flag == -1)
			{
				n++;
			}
			else
			{
				n = 0;
			}
		}
		if (n == 4)
		{
			removeChildren(node);
			make_leaf1(node);
			removenumber += 4;
			return;
		}
		else
		{
			for (i = 0; i < 4; i++)
			{
				make_leaf2(node->child[i]);
			}
		}
	}
}
